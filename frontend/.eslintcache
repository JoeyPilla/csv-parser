[{"/Users/joeypilla/Documents/Coding/go/csv-parser/frontend/src/index.js":"1","/Users/joeypilla/Documents/Coding/go/csv-parser/frontend/src/App.js":"2","/Users/joeypilla/Documents/Coding/go/csv-parser/frontend/src/dropzone/Dropzone.js":"3"},{"size":219,"mtime":1611098096173,"results":"4","hashOfConfig":"5"},{"size":3755,"mtime":1611111020041,"results":"6","hashOfConfig":"5"},{"size":6324,"mtime":1611099126254,"results":"7","hashOfConfig":"8"},{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"k8lxo1",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"2pajye","/Users/joeypilla/Documents/Coding/go/csv-parser/frontend/src/index.js",[],"/Users/joeypilla/Documents/Coding/go/csv-parser/frontend/src/App.js",[],"/Users/joeypilla/Documents/Coding/go/csv-parser/frontend/src/dropzone/Dropzone.js",["16"],"import React, { useRef, useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport \"./Dropzone.css\";\n\nconst Dropzone = () => {\n  const fileInputRef = useRef();\n  const modalImageRef = useRef();\n  const modalRef = useRef();\n  const progressRef = useRef();\n  const uploadRef = useRef();\n  const uploadModalRef = useRef();\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [validFiles, setValidFiles] = useState([]);\n  const [unsupportedFiles, setUnsupportedFiles] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  useEffect(() => {\n    let filteredArr = selectedFiles.reduce((acc, current) => {\n      const x = acc.find((item) => item.name === current.name);\n      if (!x) {\n        return acc.concat([current]);\n      } else {\n        return acc;\n      }\n    }, []);\n    setValidFiles([...filteredArr]);\n  }, [selectedFiles]);\n\n  const preventDefault = (e) => {\n    e.preventDefault();\n    // e.stopPropagation();\n  };\n\n  const dragOver = (e) => {\n    preventDefault(e);\n  };\n\n  const dragEnter = (e) => {\n    preventDefault(e);\n  };\n\n  const dragLeave = (e) => {\n    preventDefault(e);\n  };\n\n  const fileDrop = (e) => {\n    preventDefault(e);\n    const files = e.dataTransfer.files;\n    if (files.length) {\n      handleFiles(files);\n    }\n  };\n\n  const filesSelected = () => {\n    if (fileInputRef.current.files.length) {\n      handleFiles(fileInputRef.current.files);\n    }\n  };\n\n  const fileInputClicked = () => {\n    fileInputRef.current.click();\n  };\n\n  const handleFiles = (files) => {\n    for (let i = 0; i < files.length; i++) {\n      console.log(files);\n      setSelectedFiles((prevArray) => [...prevArray, files[i]]);\n    }\n  };\n\n  const fileSize = (size) => {\n    if (size === 0) {\n      return \"0 Bytes\";\n    }\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\"];\n    const i = Math.floor(Math.log(size) / Math.log(k));\n    return parseFloat((size / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  };\n\n  const fileType = (fileName) => {\n    return (\n      fileName.substring(fileName.lastIndexOf(\".\") + 1, fileName.length) ||\n      fileName\n    );\n  };\n\n  const removeFile = (name) => {\n    const index = validFiles.findIndex((e) => e.name === name);\n    const index2 = selectedFiles.findIndex((e) => e.name === name);\n    const index3 = unsupportedFiles.findIndex((e) => e.name === name);\n    validFiles.splice(index, 1);\n    selectedFiles.splice(index2, 1);\n    setValidFiles([...validFiles]);\n    setSelectedFiles([...selectedFiles]);\n    if (index3 !== -1) {\n      unsupportedFiles.splice(index3, 1);\n      setUnsupportedFiles([...unsupportedFiles]);\n    }\n  };\n\n  const openImageModal = (file) => {\n    const reader = new FileReader();\n    modalRef.current.style.display = \"block\";\n    reader.readAsDataURL(file);\n    reader.onload = function(e) {\n      modalImageRef.current.style.backgroundImage = `url(${e.target.result})`;\n    };\n  };\n\n  const closeModal = () => {\n    modalRef.current.style.display = \"none\";\n    modalImageRef.current.style.backgroundImage = \"none\";\n  };\n\n  const uploadFiles = () => {\n    uploadModalRef.current.style.display = \"block\";\n    uploadRef.current.innerHTML = \"File(s) Uploading...\";\n    for (let i = 0; i < validFiles.length; i++) {\n      const formData = new FormData();\n      formData.append(\"image\", validFiles[i]);\n\n      axios.post(\"/recieve_multiple\", formData);\n    }\n  };\n\n  const closeUploadModal = () => {\n    uploadModalRef.current.style.display = \"none\";\n  };\n\n  return (\n    <>\n      <div className=\"container\">\n        {unsupportedFiles.length === 0 && validFiles.length ? (\n          <button className=\"file-upload-btn\" onClick={() => uploadFiles()}>\n            Upload Files\n          </button>\n        ) : (\n          \"\"\n        )}\n        {unsupportedFiles.length ? (\n          <p>Please remove all unsupported files.</p>\n        ) : (\n          \"\"\n        )}\n        <div\n          className=\"drop-container\"\n          onDragOver={dragOver}\n          onDragEnter={dragEnter}\n          onDragLeave={dragLeave}\n          onDrop={fileDrop}\n          onClick={fileInputClicked}\n        >\n          <div className=\"drop-message\">\n            <div className=\"upload-icon\"></div>\n            Drag & Drop files here or click to select file(s)\n          </div>\n          <input\n            ref={fileInputRef}\n            className=\"file-input\"\n            type=\"file\"\n            multiple\n            onChange={filesSelected}\n          />\n        </div>\n        <div className=\"file-display-container\">\n          {validFiles.map((data, i) => (\n            <div className=\"file-status-bar\" key={i}>\n              <div\n                onClick={\n                  !data.invalid\n                    ? () => openImageModal(data)\n                    : () => removeFile(data.name)\n                }\n              >\n                <div className=\"file-type-logo\"></div>\n                <div className=\"file-type\">{fileType(data.name)}</div>\n                <span\n                  className={`file-name ${data.invalid ? \"file-error\" : \"\"}`}\n                >\n                  {data.name}\n                </span>\n                <span className=\"file-size\">({fileSize(data.size)})</span>{\" \"}\n                {data.invalid && (\n                  <span className=\"file-error-message\">({errorMessage})</span>\n                )}\n              </div>\n              <div\n                className=\"file-remove\"\n                onClick={() => removeFile(data.name)}\n              >\n                X\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className=\"modal\" ref={modalRef}>\n        <div className=\"overlay\"></div>\n        <span className=\"close\" onClick={() => closeModal()}>\n          X\n        </span>\n        <div className=\"modal-image\" ref={modalImageRef}></div>\n      </div>\n\n      <div className=\"upload-modal\" ref={uploadModalRef}>\n        <div className=\"overlay\"></div>\n        <div className=\"close\" onClick={() => closeUploadModal()}>\n          X\n        </div>\n        <div className=\"progress-container\">\n          <span ref={uploadRef}></span>\n          <div className=\"progress\">\n            <div className=\"progress-bar\" ref={progressRef}></div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Dropzone;\n",{"ruleId":"17","severity":1,"message":"18","line":16,"column":24,"nodeType":"19","messageId":"20","endLine":16,"endColumn":39},"no-unused-vars","'setErrorMessage' is assigned a value but never used.","Identifier","unusedVar"]